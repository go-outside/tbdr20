
on 'end-combat' add combat time to calendar? or update calendar to have combat round precision
probably need per round precision in calendar for case of effects with duration extending beyound the combat
maybe time is rounded up to nearest minute when combat ends

Does this open the turn order window?

            Campaign().set({
                initiativepage: pageid
            });



You have access to the Underscore.js library (via the _ global object) to help make things easier. 
Underscore provides helper functions for things like _.each (to iterate through an array of objects).

_.each( list, function ... ) appears to work like list.forEach( function ... )

New JavaScript syntax seems to obviate the use of underscore

What does chat command /direct do?

tap_.tap(object, interceptor)
Invokes interceptor with the object, and then returns object. The primary purpose of this method is to "tap into" a method chain, in order to perform operations on intermediate results within the chain.

_.chain([1,2,3,200])
  .filter(function(num) { return num % 2 == 0; })
  .tap(alert)
  .map(function(num) { return num * num })
  .value();
=> // [2, 200] (alerted)
=> [4, 40000]



turnorder = Campaign().get('turnorder');
turnorder = ('' === turnorder) ? [] : JSON.parse(turnorder);

message.selected is an array of objects the user had selected when the command was entered
message.type == 'api

associate selected tokens with characters:

Roll20.Objects = {
  CAMPAIGN : 'campaign',
  CHARACTER : 'character',
  GRAPHIC : 'graphic',
  MACRO : 'macro',
  PATH : 'path',
  PLAYER : 'player',
  TEXT : 'text',
  TOKEN : 'token '
};

Roll20.Verbs = {
  REPRESENTS : 'represents'
};

Roll20.Messages = {
  API : 'api'
};

participants = [];
message.selected.forEach(
  function( rollObject )
  {
    const maybeCharacter = getObject( Roll20.Objects.CHARACTER, rollObject.get( Roll20.Verbs.REPRESENTS ) );
    if ( maybeCharacter !== undefined ) {
      participants.push( { token: rollObject, character: maybeCharacter, initiative: 0 } )
    }
  } );

var stat=getAttrByName(charObj.id,details.attribute, details.type||'current');

                        rollSetup = _.chain(msg.selected)
                            .map(function(s){
                                return getObj(s._type,s._id);
                            })
                            .reject(_.isUndefined)
                            .reject(function(s){
                                return _.contains(_.pluck(turnorder,'id'),s.id);
                            })
                            .map(function(s){
                                pageid=pageid || s.get('pageid');
                                return {
                                    token: s,
                                    character: getObj('character',s.get('represents'))
                                };
                            })
                            .map(function(s){
                                s.roll=[];
                                if(s.character) {
                                    let bonus=findInitiativeBonus(s.character,s.token);
                                    bonus = (_.isString(bonus) ? (bonus.trim().length ? bonus : '0') : bonus);
                                    s.roll.push( bonus );
                                }
                                if(manualBonus) {
                                    s.roll.push( manualBonus );
                                }
                                s.roll.push( initFunc(s) );
                                return s;
                            })
                            .value();

                        initRolls = _.map(rollSetup,function(rs,i){
                                return {
                                    index: i,
                                    roll: ('[[('+ _.reject(rs.roll,function(r){
                                                return _.isString(r) && _.isEmpty(r);
                                            })
                                            .join(') + (')+')]]')
                                            .replace(/\[\[\[/g, "[[ [")
                                };
                            });


message.selected is array of selected objects
message.selected._type == 'graphic'
getObj( message.selected._type, message.selected._id )




The full list of status markers that are available (in the same order they appear in the marker tray):

"red", "blue", "green", "brown", "purple", "pink", "yellow", "dead", "skull", "sleepy", "half-heart", "half-haze", "interdiction", "snail", "lightning-helix", "spanner", "chained-heart", "chemical-bolt", "death-zone", "drink-me", "edge-crack", "ninja-mask", "stopwatch", "fishing-net", "overdrive", "strong", "fist", "padlock", "three-leaves", "fluffy-wing", "pummeled", "tread", "arrowed", "aura", "back-pain", "black-flag", "bleeding-eye", "bolt-shield", "broken-heart", "cobweb", "broken-shield", "flying-flag", "radioactive", "trophy", "broken-skull", "frozen-orb", "rolling-bomb", "white-tower", "grab", "screaming", "grenade", "sentry-gun", "all-for-one", "angel-outfit", "archery-target"

